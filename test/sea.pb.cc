// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sea.proto

#include "sea.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace sea_proto {
class GetPiCodeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPiCodeRequest>
      _instance;
} _GetPiCodeRequest_default_instance_;
class GetPiCodeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPiCodeReply>
      _instance;
} _GetPiCodeReply_default_instance_;
class GetSmsVericodeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSmsVericodeRequest>
      _instance;
} _GetSmsVericodeRequest_default_instance_;
class GetSmsVericodeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSmsVericodeReply>
      _instance;
} _GetSmsVericodeReply_default_instance_;
class SignupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignupRequest>
      _instance;
} _SignupRequest_default_instance_;
class SignupReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignupReply>
      _instance;
} _SignupReply_default_instance_;
class SetUserBasicInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetUserBasicInfoRequest>
      _instance;
} _SetUserBasicInfoRequest_default_instance_;
class SetUserBasicInfoReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetUserBasicInfoReply>
      _instance;
} _SetUserBasicInfoReply_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest>
      _instance;
} _LoginRequest_default_instance_;
class LoginReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginReply>
      _instance;
} _LoginReply_default_instance_;
class LogoutRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutRequest>
      _instance;
} _LogoutRequest_default_instance_;
class PingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PingRequest>
      _instance;
} _PingRequest_default_instance_;
class PingReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PingReply>
      _instance;
} _PingReply_default_instance_;
}  // namespace sea_proto
namespace protobuf_sea_2eproto {
void InitDefaultsGetPiCodeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsClientInfo();
  {
    void* ptr = &::sea_proto::_GetPiCodeRequest_default_instance_;
    new (ptr) ::sea_proto::GetPiCodeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::GetPiCodeRequest::InitAsDefaultInstance();
}

void InitDefaultsGetPiCodeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetPiCodeRequestImpl);
}

void InitDefaultsGetPiCodeReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsErrorInfo();
  {
    void* ptr = &::sea_proto::_GetPiCodeReply_default_instance_;
    new (ptr) ::sea_proto::GetPiCodeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::GetPiCodeReply::InitAsDefaultInstance();
}

void InitDefaultsGetPiCodeReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetPiCodeReplyImpl);
}

void InitDefaultsGetSmsVericodeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsClientInfo();
  {
    void* ptr = &::sea_proto::_GetSmsVericodeRequest_default_instance_;
    new (ptr) ::sea_proto::GetSmsVericodeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::GetSmsVericodeRequest::InitAsDefaultInstance();
}

void InitDefaultsGetSmsVericodeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetSmsVericodeRequestImpl);
}

void InitDefaultsGetSmsVericodeReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsErrorInfo();
  {
    void* ptr = &::sea_proto::_GetSmsVericodeReply_default_instance_;
    new (ptr) ::sea_proto::GetSmsVericodeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::GetSmsVericodeReply::InitAsDefaultInstance();
}

void InitDefaultsGetSmsVericodeReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetSmsVericodeReplyImpl);
}

void InitDefaultsSignupRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsClientInfo();
  {
    void* ptr = &::sea_proto::_SignupRequest_default_instance_;
    new (ptr) ::sea_proto::SignupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::SignupRequest::InitAsDefaultInstance();
}

void InitDefaultsSignupRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignupRequestImpl);
}

void InitDefaultsSignupReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsErrorInfo();
  {
    void* ptr = &::sea_proto::_SignupReply_default_instance_;
    new (ptr) ::sea_proto::SignupReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::SignupReply::InitAsDefaultInstance();
}

void InitDefaultsSignupReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignupReplyImpl);
}

void InitDefaultsSetUserBasicInfoRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_user_2eproto::InitDefaultsUserBasicInfo();
  protobuf_common_2eproto::InitDefaultsClientInfo();
  {
    void* ptr = &::sea_proto::_SetUserBasicInfoRequest_default_instance_;
    new (ptr) ::sea_proto::SetUserBasicInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::SetUserBasicInfoRequest::InitAsDefaultInstance();
}

void InitDefaultsSetUserBasicInfoRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetUserBasicInfoRequestImpl);
}

void InitDefaultsSetUserBasicInfoReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsErrorInfo();
  protobuf_user_2eproto::InitDefaultsUserBasicInfo();
  {
    void* ptr = &::sea_proto::_SetUserBasicInfoReply_default_instance_;
    new (ptr) ::sea_proto::SetUserBasicInfoReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::SetUserBasicInfoReply::InitAsDefaultInstance();
}

void InitDefaultsSetUserBasicInfoReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetUserBasicInfoReplyImpl);
}

void InitDefaultsLoginRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsClientInfo();
  {
    void* ptr = &::sea_proto::_LoginRequest_default_instance_;
    new (ptr) ::sea_proto::LoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::LoginRequest::InitAsDefaultInstance();
}

void InitDefaultsLoginRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginRequestImpl);
}

void InitDefaultsLoginReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsErrorInfo();
  protobuf_user_2eproto::InitDefaultsUserBasicInfo();
  {
    void* ptr = &::sea_proto::_LoginReply_default_instance_;
    new (ptr) ::sea_proto::LoginReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::LoginReply::InitAsDefaultInstance();
}

void InitDefaultsLoginReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginReplyImpl);
}

void InitDefaultsLogoutRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsClientInfo();
  {
    void* ptr = &::sea_proto::_LogoutRequest_default_instance_;
    new (ptr) ::sea_proto::LogoutRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::LogoutRequest::InitAsDefaultInstance();
}

void InitDefaultsLogoutRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogoutRequestImpl);
}

void InitDefaultsPingRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsClientInfo();
  {
    void* ptr = &::sea_proto::_PingRequest_default_instance_;
    new (ptr) ::sea_proto::PingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::PingRequest::InitAsDefaultInstance();
}

void InitDefaultsPingRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPingRequestImpl);
}

void InitDefaultsPingReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsErrorInfo();
  {
    void* ptr = &::sea_proto::_PingReply_default_instance_;
    new (ptr) ::sea_proto::PingReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea_proto::PingReply::InitAsDefaultInstance();
}

void InitDefaultsPingReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPingReplyImpl);
}

::google::protobuf::Metadata file_level_metadata[13];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetPiCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetPiCodeRequest, client_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetPiCodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetPiCodeReply, err_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetPiCodeReply, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetPiCodeReply, img_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetSmsVericodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetSmsVericodeRequest, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetSmsVericodeRequest, pic_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetSmsVericodeRequest, phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetSmsVericodeRequest, client_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetSmsVericodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetSmsVericodeReply, err_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::GetSmsVericodeReply, expire_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupRequest, phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupRequest, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupRequest, verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupRequest, passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupRequest, client_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupReply, err_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SignupReply, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SetUserBasicInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SetUserBasicInfoRequest, user_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SetUserBasicInfoRequest, client_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SetUserBasicInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SetUserBasicInfoReply, err_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::SetUserBasicInfoReply, user_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginRequest, phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginRequest, passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginRequest, openid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginRequest, openid_sig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginRequest, client_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginReply, err_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginReply, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LoginReply, user_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::LogoutRequest, client_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::PingRequest, client_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::PingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea_proto::PingReply, err_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sea_proto::GetPiCodeRequest)},
  { 6, -1, sizeof(::sea_proto::GetPiCodeReply)},
  { 14, -1, sizeof(::sea_proto::GetSmsVericodeRequest)},
  { 23, -1, sizeof(::sea_proto::GetSmsVericodeReply)},
  { 30, -1, sizeof(::sea_proto::SignupRequest)},
  { 41, -1, sizeof(::sea_proto::SignupReply)},
  { 48, -1, sizeof(::sea_proto::SetUserBasicInfoRequest)},
  { 55, -1, sizeof(::sea_proto::SetUserBasicInfoReply)},
  { 62, -1, sizeof(::sea_proto::LoginRequest)},
  { 72, -1, sizeof(::sea_proto::LoginReply)},
  { 80, -1, sizeof(::sea_proto::LogoutRequest)},
  { 86, -1, sizeof(::sea_proto::PingRequest)},
  { 92, -1, sizeof(::sea_proto::PingReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_GetPiCodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_GetPiCodeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_GetSmsVericodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_GetSmsVericodeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_SignupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_SignupReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_SetUserBasicInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_SetUserBasicInfoReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_LoginReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_LogoutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_PingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea_proto::_PingReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sea.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tsea.proto\022\tsea_proto\032\037google/protobuf/"
      "timestamp.proto\032\014common.proto\032\nuser.prot"
      "o\">\n\020GetPiCodeRequest\022*\n\013client_info\030\t \001"
      "(\0132\025.sea_proto.ClientInfo\"^\n\016GetPiCodeRe"
      "ply\022&\n\010err_info\030\001 \001(\0132\024.sea_proto.ErrorI"
      "nfo\022\022\n\nsession_id\030\002 \001(\t\022\020\n\010img_data\030\003 \001("
      "\014\"x\n\025GetSmsVericodeRequest\022\022\n\nsession_id"
      "\030\001 \001(\t\022\020\n\010pic_code\030\002 \001(\t\022\r\n\005phone\030\003 \001(\t\022"
      "*\n\013client_info\030\t \001(\0132\025.sea_proto.ClientI"
      "nfo\"R\n\023GetSmsVericodeReply\022&\n\010err_info\030\001"
      " \001(\0132\024.sea_proto.ErrorInfo\022\023\n\013expire_tim"
      "e\030\002 \001(\005\"\221\001\n\rSignupRequest\022\r\n\005phone\030\001 \001(\t"
      "\022\022\n\nsession_id\030\002 \001(\t\022\023\n\013verify_code\030\003 \001("
      "\t\022\016\n\006passwd\030\004 \001(\t\022\014\n\004name\030\005 \001(\t\022*\n\013clien"
      "t_info\030\t \001(\0132\025.sea_proto.ClientInfo\"B\n\013S"
      "ignupReply\022&\n\010err_info\030\001 \001(\0132\024.sea_proto"
      ".ErrorInfo\022\013\n\003uid\030\002 \001(\003\"s\n\027SetUserBasicI"
      "nfoRequest\022,\n\tuser_info\030\001 \001(\0132\031.user_pro"
      "to.UserBasicInfo\022*\n\013client_info\030\t \001(\0132\025."
      "sea_proto.ClientInfo\"m\n\025SetUserBasicInfo"
      "Reply\022&\n\010err_info\030\001 \001(\0132\024.sea_proto.Erro"
      "rInfo\022,\n\tuser_info\030\002 \001(\0132\031.user_proto.Us"
      "erBasicInfo\"}\n\014LoginRequest\022\r\n\005phone\030\001 \001"
      "(\t\022\016\n\006passwd\030\002 \001(\t\022\016\n\006openid\030\003 \001(\t\022\022\n\nop"
      "enid_sig\030\004 \001(\t\022*\n\013client_info\030\t \001(\0132\025.se"
      "a_proto.ClientInfo\"s\n\nLoginReply\022&\n\010err_"
      "info\030\001 \001(\0132\024.sea_proto.ErrorInfo\022\017\n\007sess"
      "ion\030\002 \001(\t\022,\n\tuser_info\030\t \001(\0132\031.user_prot"
      "o.UserBasicInfo\";\n\rLogoutRequest\022*\n\013clie"
      "nt_info\030\001 \001(\0132\025.sea_proto.ClientInfo\"9\n\013"
      "PingRequest\022*\n\013client_info\030\001 \001(\0132\025.sea_p"
      "roto.ClientInfo\"3\n\tPingReply\022&\n\010err_info"
      "\030\001 \001(\0132\024.sea_proto.ErrorInfo2\344\003\n\nSeaServ"
      "ice\0227\n\005Login\022\027.sea_proto.LoginRequest\032\025."
      "sea_proto.LoginReply\0228\n\006Logout\022\030.sea_pro"
      "to.LogoutRequest\032\024.sea_proto.ErrorInfo\022:"
      "\n\006Signup\022\030.sea_proto.SignupRequest\032\026.sea"
      "_proto.SignupReply\022X\n\020SetUserBasicInfo\022\""
      ".sea_proto.SetUserBasicInfoRequest\032 .sea"
      "_proto.SetUserBasicInfoReply\022C\n\tGetPiCod"
      "e\022\033.sea_proto.GetPiCodeRequest\032\031.sea_pro"
      "to.GetPiCodeReply\022R\n\016GetSmsVericode\022 .se"
      "a_proto.GetSmsVericodeRequest\032\036.sea_prot"
      "o.GetSmsVericodeReply\0224\n\004Ping\022\026.sea_prot"
      "o.PingRequest\032\024.sea_proto.PingReplyB<\n\021t"
      "op.ffox.SeaProtoB\010SeaProto\242\002\010SEAPROTO\252\002\021"
      "top.ffox.SeaProtob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1865);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sea.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_user_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sea_2eproto
namespace sea_proto {

// ===================================================================

void GetPiCodeRequest::InitAsDefaultInstance() {
  ::sea_proto::_GetPiCodeRequest_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::sea_proto::ClientInfo*>(
      ::sea_proto::ClientInfo::internal_default_instance());
}
void GetPiCodeRequest::clear_client_info() {
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPiCodeRequest::kClientInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPiCodeRequest::GetPiCodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsGetPiCodeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.GetPiCodeRequest)
}
GetPiCodeRequest::GetPiCodeRequest(const GetPiCodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_client_info()) {
    client_info_ = new ::sea_proto::ClientInfo(*from.client_info_);
  } else {
    client_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.GetPiCodeRequest)
}

void GetPiCodeRequest::SharedCtor() {
  client_info_ = NULL;
  _cached_size_ = 0;
}

GetPiCodeRequest::~GetPiCodeRequest() {
  // @@protoc_insertion_point(destructor:sea_proto.GetPiCodeRequest)
  SharedDtor();
}

void GetPiCodeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete client_info_;
}

void GetPiCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPiCodeRequest::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPiCodeRequest& GetPiCodeRequest::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsGetPiCodeRequest();
  return *internal_default_instance();
}


void GetPiCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.GetPiCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
  _internal_metadata_.Clear();
}

bool GetPiCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.GetPiCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sea_proto.ClientInfo client_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.GetPiCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.GetPiCodeRequest)
  return false;
#undef DO_
}

void GetPiCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.GetPiCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *client_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.GetPiCodeRequest)
}

::google::protobuf::uint8* GetPiCodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.GetPiCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *client_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.GetPiCodeRequest)
  return target;
}

size_t GetPiCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.GetPiCodeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPiCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.GetPiCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPiCodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPiCodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.GetPiCodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.GetPiCodeRequest)
    MergeFrom(*source);
  }
}

void GetPiCodeRequest::MergeFrom(const GetPiCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.GetPiCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_info()) {
    mutable_client_info()->::sea_proto::ClientInfo::MergeFrom(from.client_info());
  }
}

void GetPiCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.GetPiCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPiCodeRequest::CopyFrom(const GetPiCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.GetPiCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPiCodeRequest::IsInitialized() const {
  return true;
}

void GetPiCodeRequest::Swap(GetPiCodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPiCodeRequest::InternalSwap(GetPiCodeRequest* other) {
  using std::swap;
  swap(client_info_, other->client_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPiCodeRequest::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPiCodeReply::InitAsDefaultInstance() {
  ::sea_proto::_GetPiCodeReply_default_instance_._instance.get_mutable()->err_info_ = const_cast< ::sea_proto::ErrorInfo*>(
      ::sea_proto::ErrorInfo::internal_default_instance());
}
void GetPiCodeReply::clear_err_info() {
  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPiCodeReply::kErrInfoFieldNumber;
const int GetPiCodeReply::kSessionIdFieldNumber;
const int GetPiCodeReply::kImgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPiCodeReply::GetPiCodeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsGetPiCodeReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.GetPiCodeReply)
}
GetPiCodeReply::GetPiCodeReply(const GetPiCodeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  img_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.img_data().size() > 0) {
    img_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_data_);
  }
  if (from.has_err_info()) {
    err_info_ = new ::sea_proto::ErrorInfo(*from.err_info_);
  } else {
    err_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.GetPiCodeReply)
}

void GetPiCodeReply::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_info_ = NULL;
  _cached_size_ = 0;
}

GetPiCodeReply::~GetPiCodeReply() {
  // @@protoc_insertion_point(destructor:sea_proto.GetPiCodeReply)
  SharedDtor();
}

void GetPiCodeReply::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete err_info_;
}

void GetPiCodeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPiCodeReply::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPiCodeReply& GetPiCodeReply::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsGetPiCodeReply();
  return *internal_default_instance();
}


void GetPiCodeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.GetPiCodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
  _internal_metadata_.Clear();
}

bool GetPiCodeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.GetPiCodeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sea_proto.ErrorInfo err_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_err_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.GetPiCodeReply.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes img_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_img_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.GetPiCodeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.GetPiCodeReply)
  return false;
#undef DO_
}

void GetPiCodeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.GetPiCodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *err_info_, output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.GetPiCodeReply.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // bytes img_data = 3;
  if (this->img_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->img_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.GetPiCodeReply)
}

::google::protobuf::uint8* GetPiCodeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.GetPiCodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *err_info_, deterministic, target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.GetPiCodeReply.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // bytes img_data = 3;
  if (this->img_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->img_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.GetPiCodeReply)
  return target;
}

size_t GetPiCodeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.GetPiCodeReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // bytes img_data = 3;
  if (this->img_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->img_data());
  }

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *err_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPiCodeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.GetPiCodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPiCodeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPiCodeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.GetPiCodeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.GetPiCodeReply)
    MergeFrom(*source);
  }
}

void GetPiCodeReply::MergeFrom(const GetPiCodeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.GetPiCodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.img_data().size() > 0) {

    img_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_data_);
  }
  if (from.has_err_info()) {
    mutable_err_info()->::sea_proto::ErrorInfo::MergeFrom(from.err_info());
  }
}

void GetPiCodeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.GetPiCodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPiCodeReply::CopyFrom(const GetPiCodeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.GetPiCodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPiCodeReply::IsInitialized() const {
  return true;
}

void GetPiCodeReply::Swap(GetPiCodeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPiCodeReply::InternalSwap(GetPiCodeReply* other) {
  using std::swap;
  session_id_.Swap(&other->session_id_);
  img_data_.Swap(&other->img_data_);
  swap(err_info_, other->err_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPiCodeReply::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSmsVericodeRequest::InitAsDefaultInstance() {
  ::sea_proto::_GetSmsVericodeRequest_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::sea_proto::ClientInfo*>(
      ::sea_proto::ClientInfo::internal_default_instance());
}
void GetSmsVericodeRequest::clear_client_info() {
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSmsVericodeRequest::kSessionIdFieldNumber;
const int GetSmsVericodeRequest::kPicCodeFieldNumber;
const int GetSmsVericodeRequest::kPhoneFieldNumber;
const int GetSmsVericodeRequest::kClientInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSmsVericodeRequest::GetSmsVericodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsGetSmsVericodeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.GetSmsVericodeRequest)
}
GetSmsVericodeRequest::GetSmsVericodeRequest(const GetSmsVericodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  pic_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pic_code().size() > 0) {
    pic_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pic_code_);
  }
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phone().size() > 0) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.has_client_info()) {
    client_info_ = new ::sea_proto::ClientInfo(*from.client_info_);
  } else {
    client_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.GetSmsVericodeRequest)
}

void GetSmsVericodeRequest::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_info_ = NULL;
  _cached_size_ = 0;
}

GetSmsVericodeRequest::~GetSmsVericodeRequest() {
  // @@protoc_insertion_point(destructor:sea_proto.GetSmsVericodeRequest)
  SharedDtor();
}

void GetSmsVericodeRequest::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_info_;
}

void GetSmsVericodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSmsVericodeRequest::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSmsVericodeRequest& GetSmsVericodeRequest::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsGetSmsVericodeRequest();
  return *internal_default_instance();
}


void GetSmsVericodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.GetSmsVericodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
  _internal_metadata_.Clear();
}

bool GetSmsVericodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.GetSmsVericodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.GetSmsVericodeRequest.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pic_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pic_code().data(), static_cast<int>(this->pic_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.GetSmsVericodeRequest.pic_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.GetSmsVericodeRequest.phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sea_proto.ClientInfo client_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.GetSmsVericodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.GetSmsVericodeRequest)
  return false;
#undef DO_
}

void GetSmsVericodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.GetSmsVericodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.GetSmsVericodeRequest.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // string pic_code = 2;
  if (this->pic_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pic_code().data(), static_cast<int>(this->pic_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.GetSmsVericodeRequest.pic_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pic_code(), output);
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.GetSmsVericodeRequest.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phone(), output);
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *client_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.GetSmsVericodeRequest)
}

::google::protobuf::uint8* GetSmsVericodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.GetSmsVericodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.GetSmsVericodeRequest.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // string pic_code = 2;
  if (this->pic_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pic_code().data(), static_cast<int>(this->pic_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.GetSmsVericodeRequest.pic_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pic_code(), target);
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.GetSmsVericodeRequest.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *client_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.GetSmsVericodeRequest)
  return target;
}

size_t GetSmsVericodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.GetSmsVericodeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string pic_code = 2;
  if (this->pic_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pic_code());
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSmsVericodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.GetSmsVericodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSmsVericodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSmsVericodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.GetSmsVericodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.GetSmsVericodeRequest)
    MergeFrom(*source);
  }
}

void GetSmsVericodeRequest::MergeFrom(const GetSmsVericodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.GetSmsVericodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.pic_code().size() > 0) {

    pic_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pic_code_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.has_client_info()) {
    mutable_client_info()->::sea_proto::ClientInfo::MergeFrom(from.client_info());
  }
}

void GetSmsVericodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.GetSmsVericodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSmsVericodeRequest::CopyFrom(const GetSmsVericodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.GetSmsVericodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSmsVericodeRequest::IsInitialized() const {
  return true;
}

void GetSmsVericodeRequest::Swap(GetSmsVericodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSmsVericodeRequest::InternalSwap(GetSmsVericodeRequest* other) {
  using std::swap;
  session_id_.Swap(&other->session_id_);
  pic_code_.Swap(&other->pic_code_);
  phone_.Swap(&other->phone_);
  swap(client_info_, other->client_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSmsVericodeRequest::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSmsVericodeReply::InitAsDefaultInstance() {
  ::sea_proto::_GetSmsVericodeReply_default_instance_._instance.get_mutable()->err_info_ = const_cast< ::sea_proto::ErrorInfo*>(
      ::sea_proto::ErrorInfo::internal_default_instance());
}
void GetSmsVericodeReply::clear_err_info() {
  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSmsVericodeReply::kErrInfoFieldNumber;
const int GetSmsVericodeReply::kExpireTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSmsVericodeReply::GetSmsVericodeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsGetSmsVericodeReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.GetSmsVericodeReply)
}
GetSmsVericodeReply::GetSmsVericodeReply(const GetSmsVericodeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err_info()) {
    err_info_ = new ::sea_proto::ErrorInfo(*from.err_info_);
  } else {
    err_info_ = NULL;
  }
  expire_time_ = from.expire_time_;
  // @@protoc_insertion_point(copy_constructor:sea_proto.GetSmsVericodeReply)
}

void GetSmsVericodeReply::SharedCtor() {
  ::memset(&err_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&err_info_)) + sizeof(expire_time_));
  _cached_size_ = 0;
}

GetSmsVericodeReply::~GetSmsVericodeReply() {
  // @@protoc_insertion_point(destructor:sea_proto.GetSmsVericodeReply)
  SharedDtor();
}

void GetSmsVericodeReply::SharedDtor() {
  if (this != internal_default_instance()) delete err_info_;
}

void GetSmsVericodeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSmsVericodeReply::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSmsVericodeReply& GetSmsVericodeReply::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsGetSmsVericodeReply();
  return *internal_default_instance();
}


void GetSmsVericodeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.GetSmsVericodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
  expire_time_ = 0;
  _internal_metadata_.Clear();
}

bool GetSmsVericodeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.GetSmsVericodeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sea_proto.ErrorInfo err_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_err_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expire_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.GetSmsVericodeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.GetSmsVericodeReply)
  return false;
#undef DO_
}

void GetSmsVericodeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.GetSmsVericodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *err_info_, output);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expire_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.GetSmsVericodeReply)
}

::google::protobuf::uint8* GetSmsVericodeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.GetSmsVericodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *err_info_, deterministic, target);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expire_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.GetSmsVericodeReply)
  return target;
}

size_t GetSmsVericodeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.GetSmsVericodeReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *err_info_);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expire_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSmsVericodeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.GetSmsVericodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSmsVericodeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSmsVericodeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.GetSmsVericodeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.GetSmsVericodeReply)
    MergeFrom(*source);
  }
}

void GetSmsVericodeReply::MergeFrom(const GetSmsVericodeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.GetSmsVericodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_err_info()) {
    mutable_err_info()->::sea_proto::ErrorInfo::MergeFrom(from.err_info());
  }
  if (from.expire_time() != 0) {
    set_expire_time(from.expire_time());
  }
}

void GetSmsVericodeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.GetSmsVericodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSmsVericodeReply::CopyFrom(const GetSmsVericodeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.GetSmsVericodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSmsVericodeReply::IsInitialized() const {
  return true;
}

void GetSmsVericodeReply::Swap(GetSmsVericodeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSmsVericodeReply::InternalSwap(GetSmsVericodeReply* other) {
  using std::swap;
  swap(err_info_, other->err_info_);
  swap(expire_time_, other->expire_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSmsVericodeReply::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignupRequest::InitAsDefaultInstance() {
  ::sea_proto::_SignupRequest_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::sea_proto::ClientInfo*>(
      ::sea_proto::ClientInfo::internal_default_instance());
}
void SignupRequest::clear_client_info() {
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignupRequest::kPhoneFieldNumber;
const int SignupRequest::kSessionIdFieldNumber;
const int SignupRequest::kVerifyCodeFieldNumber;
const int SignupRequest::kPasswdFieldNumber;
const int SignupRequest::kNameFieldNumber;
const int SignupRequest::kClientInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignupRequest::SignupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsSignupRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.SignupRequest)
}
SignupRequest::SignupRequest(const SignupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phone().size() > 0) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  verify_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.verify_code().size() > 0) {
    verify_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_code_);
  }
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passwd().size() > 0) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_client_info()) {
    client_info_ = new ::sea_proto::ClientInfo(*from.client_info_);
  } else {
    client_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.SignupRequest)
}

void SignupRequest::SharedCtor() {
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_info_ = NULL;
  _cached_size_ = 0;
}

SignupRequest::~SignupRequest() {
  // @@protoc_insertion_point(destructor:sea_proto.SignupRequest)
  SharedDtor();
}

void SignupRequest::SharedDtor() {
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_info_;
}

void SignupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignupRequest::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignupRequest& SignupRequest::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsSignupRequest();
  return *internal_default_instance();
}


void SignupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.SignupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
  _internal_metadata_.Clear();
}

bool SignupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.SignupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string phone = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.SignupRequest.phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.SignupRequest.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string verify_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verify_code().data(), static_cast<int>(this->verify_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.SignupRequest.verify_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), static_cast<int>(this->passwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.SignupRequest.passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.SignupRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sea_proto.ClientInfo client_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.SignupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.SignupRequest)
  return false;
#undef DO_
}

void SignupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.SignupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phone = 1;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phone(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // string verify_code = 3;
  if (this->verify_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_code().data(), static_cast<int>(this->verify_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.verify_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->verify_code(), output);
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->passwd(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *client_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.SignupRequest)
}

::google::protobuf::uint8* SignupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.SignupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phone = 1;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // string verify_code = 3;
  if (this->verify_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_code().data(), static_cast<int>(this->verify_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.verify_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->verify_code(), target);
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.SignupRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *client_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.SignupRequest)
  return target;
}

size_t SignupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.SignupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string phone = 1;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string verify_code = 3;
  if (this->verify_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verify_code());
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.SignupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.SignupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.SignupRequest)
    MergeFrom(*source);
  }
}

void SignupRequest::MergeFrom(const SignupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.SignupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.verify_code().size() > 0) {

    verify_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_code_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_client_info()) {
    mutable_client_info()->::sea_proto::ClientInfo::MergeFrom(from.client_info());
  }
}

void SignupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.SignupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignupRequest::CopyFrom(const SignupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.SignupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignupRequest::IsInitialized() const {
  return true;
}

void SignupRequest::Swap(SignupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignupRequest::InternalSwap(SignupRequest* other) {
  using std::swap;
  phone_.Swap(&other->phone_);
  session_id_.Swap(&other->session_id_);
  verify_code_.Swap(&other->verify_code_);
  passwd_.Swap(&other->passwd_);
  name_.Swap(&other->name_);
  swap(client_info_, other->client_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignupRequest::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignupReply::InitAsDefaultInstance() {
  ::sea_proto::_SignupReply_default_instance_._instance.get_mutable()->err_info_ = const_cast< ::sea_proto::ErrorInfo*>(
      ::sea_proto::ErrorInfo::internal_default_instance());
}
void SignupReply::clear_err_info() {
  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignupReply::kErrInfoFieldNumber;
const int SignupReply::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignupReply::SignupReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsSignupReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.SignupReply)
}
SignupReply::SignupReply(const SignupReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err_info()) {
    err_info_ = new ::sea_proto::ErrorInfo(*from.err_info_);
  } else {
    err_info_ = NULL;
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:sea_proto.SignupReply)
}

void SignupReply::SharedCtor() {
  ::memset(&err_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&err_info_)) + sizeof(uid_));
  _cached_size_ = 0;
}

SignupReply::~SignupReply() {
  // @@protoc_insertion_point(destructor:sea_proto.SignupReply)
  SharedDtor();
}

void SignupReply::SharedDtor() {
  if (this != internal_default_instance()) delete err_info_;
}

void SignupReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignupReply::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignupReply& SignupReply::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsSignupReply();
  return *internal_default_instance();
}


void SignupReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.SignupReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
  uid_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool SignupReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.SignupReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sea_proto.ErrorInfo err_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_err_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.SignupReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.SignupReply)
  return false;
#undef DO_
}

void SignupReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.SignupReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *err_info_, output);
  }

  // int64 uid = 2;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.SignupReply)
}

::google::protobuf::uint8* SignupReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.SignupReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *err_info_, deterministic, target);
  }

  // int64 uid = 2;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.SignupReply)
  return target;
}

size_t SignupReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.SignupReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *err_info_);
  }

  // int64 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignupReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.SignupReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SignupReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignupReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.SignupReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.SignupReply)
    MergeFrom(*source);
  }
}

void SignupReply::MergeFrom(const SignupReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.SignupReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_err_info()) {
    mutable_err_info()->::sea_proto::ErrorInfo::MergeFrom(from.err_info());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void SignupReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.SignupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignupReply::CopyFrom(const SignupReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.SignupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignupReply::IsInitialized() const {
  return true;
}

void SignupReply::Swap(SignupReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignupReply::InternalSwap(SignupReply* other) {
  using std::swap;
  swap(err_info_, other->err_info_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignupReply::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetUserBasicInfoRequest::InitAsDefaultInstance() {
  ::sea_proto::_SetUserBasicInfoRequest_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::user_proto::UserBasicInfo*>(
      ::user_proto::UserBasicInfo::internal_default_instance());
  ::sea_proto::_SetUserBasicInfoRequest_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::sea_proto::ClientInfo*>(
      ::sea_proto::ClientInfo::internal_default_instance());
}
void SetUserBasicInfoRequest::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
}
void SetUserBasicInfoRequest::clear_client_info() {
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetUserBasicInfoRequest::kUserInfoFieldNumber;
const int SetUserBasicInfoRequest::kClientInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetUserBasicInfoRequest::SetUserBasicInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsSetUserBasicInfoRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.SetUserBasicInfoRequest)
}
SetUserBasicInfoRequest::SetUserBasicInfoRequest(const SetUserBasicInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_info()) {
    user_info_ = new ::user_proto::UserBasicInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  if (from.has_client_info()) {
    client_info_ = new ::sea_proto::ClientInfo(*from.client_info_);
  } else {
    client_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.SetUserBasicInfoRequest)
}

void SetUserBasicInfoRequest::SharedCtor() {
  ::memset(&user_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_info_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(client_info_));
  _cached_size_ = 0;
}

SetUserBasicInfoRequest::~SetUserBasicInfoRequest() {
  // @@protoc_insertion_point(destructor:sea_proto.SetUserBasicInfoRequest)
  SharedDtor();
}

void SetUserBasicInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete client_info_;
}

void SetUserBasicInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUserBasicInfoRequest::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetUserBasicInfoRequest& SetUserBasicInfoRequest::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsSetUserBasicInfoRequest();
  return *internal_default_instance();
}


void SetUserBasicInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.SetUserBasicInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
  _internal_metadata_.Clear();
}

bool SetUserBasicInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.SetUserBasicInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .user_proto.UserBasicInfo user_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sea_proto.ClientInfo client_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.SetUserBasicInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.SetUserBasicInfoRequest)
  return false;
#undef DO_
}

void SetUserBasicInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.SetUserBasicInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .user_proto.UserBasicInfo user_info = 1;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *user_info_, output);
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *client_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.SetUserBasicInfoRequest)
}

::google::protobuf::uint8* SetUserBasicInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.SetUserBasicInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .user_proto.UserBasicInfo user_info = 1;
  if (this->has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *user_info_, deterministic, target);
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *client_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.SetUserBasicInfoRequest)
  return target;
}

size_t SetUserBasicInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.SetUserBasicInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .user_proto.UserBasicInfo user_info = 1;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUserBasicInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.SetUserBasicInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUserBasicInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetUserBasicInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.SetUserBasicInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.SetUserBasicInfoRequest)
    MergeFrom(*source);
  }
}

void SetUserBasicInfoRequest::MergeFrom(const SetUserBasicInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.SetUserBasicInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_info()) {
    mutable_user_info()->::user_proto::UserBasicInfo::MergeFrom(from.user_info());
  }
  if (from.has_client_info()) {
    mutable_client_info()->::sea_proto::ClientInfo::MergeFrom(from.client_info());
  }
}

void SetUserBasicInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.SetUserBasicInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserBasicInfoRequest::CopyFrom(const SetUserBasicInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.SetUserBasicInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserBasicInfoRequest::IsInitialized() const {
  return true;
}

void SetUserBasicInfoRequest::Swap(SetUserBasicInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetUserBasicInfoRequest::InternalSwap(SetUserBasicInfoRequest* other) {
  using std::swap;
  swap(user_info_, other->user_info_);
  swap(client_info_, other->client_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetUserBasicInfoRequest::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetUserBasicInfoReply::InitAsDefaultInstance() {
  ::sea_proto::_SetUserBasicInfoReply_default_instance_._instance.get_mutable()->err_info_ = const_cast< ::sea_proto::ErrorInfo*>(
      ::sea_proto::ErrorInfo::internal_default_instance());
  ::sea_proto::_SetUserBasicInfoReply_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::user_proto::UserBasicInfo*>(
      ::user_proto::UserBasicInfo::internal_default_instance());
}
void SetUserBasicInfoReply::clear_err_info() {
  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
}
void SetUserBasicInfoReply::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetUserBasicInfoReply::kErrInfoFieldNumber;
const int SetUserBasicInfoReply::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetUserBasicInfoReply::SetUserBasicInfoReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsSetUserBasicInfoReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.SetUserBasicInfoReply)
}
SetUserBasicInfoReply::SetUserBasicInfoReply(const SetUserBasicInfoReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err_info()) {
    err_info_ = new ::sea_proto::ErrorInfo(*from.err_info_);
  } else {
    err_info_ = NULL;
  }
  if (from.has_user_info()) {
    user_info_ = new ::user_proto::UserBasicInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.SetUserBasicInfoReply)
}

void SetUserBasicInfoReply::SharedCtor() {
  ::memset(&err_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_info_) -
      reinterpret_cast<char*>(&err_info_)) + sizeof(user_info_));
  _cached_size_ = 0;
}

SetUserBasicInfoReply::~SetUserBasicInfoReply() {
  // @@protoc_insertion_point(destructor:sea_proto.SetUserBasicInfoReply)
  SharedDtor();
}

void SetUserBasicInfoReply::SharedDtor() {
  if (this != internal_default_instance()) delete err_info_;
  if (this != internal_default_instance()) delete user_info_;
}

void SetUserBasicInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUserBasicInfoReply::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetUserBasicInfoReply& SetUserBasicInfoReply::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsSetUserBasicInfoReply();
  return *internal_default_instance();
}


void SetUserBasicInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.SetUserBasicInfoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
  _internal_metadata_.Clear();
}

bool SetUserBasicInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.SetUserBasicInfoReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sea_proto.ErrorInfo err_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_err_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .user_proto.UserBasicInfo user_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.SetUserBasicInfoReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.SetUserBasicInfoReply)
  return false;
#undef DO_
}

void SetUserBasicInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.SetUserBasicInfoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *err_info_, output);
  }

  // .user_proto.UserBasicInfo user_info = 2;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *user_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.SetUserBasicInfoReply)
}

::google::protobuf::uint8* SetUserBasicInfoReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.SetUserBasicInfoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *err_info_, deterministic, target);
  }

  // .user_proto.UserBasicInfo user_info = 2;
  if (this->has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *user_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.SetUserBasicInfoReply)
  return target;
}

size_t SetUserBasicInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.SetUserBasicInfoReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *err_info_);
  }

  // .user_proto.UserBasicInfo user_info = 2;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUserBasicInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.SetUserBasicInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUserBasicInfoReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetUserBasicInfoReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.SetUserBasicInfoReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.SetUserBasicInfoReply)
    MergeFrom(*source);
  }
}

void SetUserBasicInfoReply::MergeFrom(const SetUserBasicInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.SetUserBasicInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_err_info()) {
    mutable_err_info()->::sea_proto::ErrorInfo::MergeFrom(from.err_info());
  }
  if (from.has_user_info()) {
    mutable_user_info()->::user_proto::UserBasicInfo::MergeFrom(from.user_info());
  }
}

void SetUserBasicInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.SetUserBasicInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserBasicInfoReply::CopyFrom(const SetUserBasicInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.SetUserBasicInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserBasicInfoReply::IsInitialized() const {
  return true;
}

void SetUserBasicInfoReply::Swap(SetUserBasicInfoReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetUserBasicInfoReply::InternalSwap(SetUserBasicInfoReply* other) {
  using std::swap;
  swap(err_info_, other->err_info_);
  swap(user_info_, other->user_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetUserBasicInfoReply::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
  ::sea_proto::_LoginRequest_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::sea_proto::ClientInfo*>(
      ::sea_proto::ClientInfo::internal_default_instance());
}
void LoginRequest::clear_client_info() {
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kPhoneFieldNumber;
const int LoginRequest::kPasswdFieldNumber;
const int LoginRequest::kOpenidFieldNumber;
const int LoginRequest::kOpenidSigFieldNumber;
const int LoginRequest::kClientInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsLoginRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phone().size() > 0) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passwd().size() > 0) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.openid().size() > 0) {
    openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  openid_sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.openid_sig().size() > 0) {
    openid_sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_sig_);
  }
  if (from.has_client_info()) {
    client_info_ = new ::sea_proto::ClientInfo(*from.client_info_);
  } else {
    client_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.LoginRequest)
}

void LoginRequest::SharedCtor() {
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_info_ = NULL;
  _cached_size_ = 0;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:sea_proto.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_info_;
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequest& LoginRequest::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsLoginRequest();
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
  _internal_metadata_.Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string phone = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.LoginRequest.phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), static_cast<int>(this->passwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.LoginRequest.passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string openid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->openid().data(), static_cast<int>(this->openid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.LoginRequest.openid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string openid_sig = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid_sig()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->openid_sig().data(), static_cast<int>(this->openid_sig().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.LoginRequest.openid_sig"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sea_proto.ClientInfo client_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phone = 1;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginRequest.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phone(), output);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginRequest.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwd(), output);
  }

  // string openid = 3;
  if (this->openid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openid().data(), static_cast<int>(this->openid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginRequest.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->openid(), output);
  }

  // string openid_sig = 4;
  if (this->openid_sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openid_sig().data(), static_cast<int>(this->openid_sig().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginRequest.openid_sig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->openid_sig(), output);
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *client_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phone = 1;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginRequest.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone(), target);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginRequest.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // string openid = 3;
  if (this->openid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openid().data(), static_cast<int>(this->openid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginRequest.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openid(), target);
  }

  // string openid_sig = 4;
  if (this->openid_sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openid_sig().data(), static_cast<int>(this->openid_sig().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginRequest.openid_sig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid_sig(), target);
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *client_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.LoginRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string phone = 1;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // string openid = 3;
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());
  }

  // string openid_sig = 4;
  if (this->openid_sig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid_sig());
  }

  // .sea_proto.ClientInfo client_info = 9;
  if (this->has_client_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.openid().size() > 0) {

    openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  if (from.openid_sig().size() > 0) {

    openid_sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_sig_);
  }
  if (from.has_client_info()) {
    mutable_client_info()->::sea_proto::ClientInfo::MergeFrom(from.client_info());
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  phone_.Swap(&other->phone_);
  passwd_.Swap(&other->passwd_);
  openid_.Swap(&other->openid_);
  openid_sig_.Swap(&other->openid_sig_);
  swap(client_info_, other->client_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginReply::InitAsDefaultInstance() {
  ::sea_proto::_LoginReply_default_instance_._instance.get_mutable()->err_info_ = const_cast< ::sea_proto::ErrorInfo*>(
      ::sea_proto::ErrorInfo::internal_default_instance());
  ::sea_proto::_LoginReply_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::user_proto::UserBasicInfo*>(
      ::user_proto::UserBasicInfo::internal_default_instance());
}
void LoginReply::clear_err_info() {
  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
}
void LoginReply::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReply::kErrInfoFieldNumber;
const int LoginReply::kSessionFieldNumber;
const int LoginReply::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReply::LoginReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsLoginReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.LoginReply)
}
LoginReply::LoginReply(const LoginReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session().size() > 0) {
    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.has_err_info()) {
    err_info_ = new ::sea_proto::ErrorInfo(*from.err_info_);
  } else {
    err_info_ = NULL;
  }
  if (from.has_user_info()) {
    user_info_ = new ::user_proto::UserBasicInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.LoginReply)
}

void LoginReply::SharedCtor() {
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&err_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_info_) -
      reinterpret_cast<char*>(&err_info_)) + sizeof(user_info_));
  _cached_size_ = 0;
}

LoginReply::~LoginReply() {
  // @@protoc_insertion_point(destructor:sea_proto.LoginReply)
  SharedDtor();
}

void LoginReply::SharedDtor() {
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete err_info_;
  if (this != internal_default_instance()) delete user_info_;
}

void LoginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReply::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginReply& LoginReply::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsLoginReply();
  return *internal_default_instance();
}


void LoginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.LoginReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
  _internal_metadata_.Clear();
}

bool LoginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.LoginReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sea_proto.ErrorInfo err_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_err_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session().data(), static_cast<int>(this->session().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea_proto.LoginReply.session"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .user_proto.UserBasicInfo user_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.LoginReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.LoginReply)
  return false;
#undef DO_
}

void LoginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.LoginReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *err_info_, output);
  }

  // string session = 2;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginReply.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session(), output);
  }

  // .user_proto.UserBasicInfo user_info = 9;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *user_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.LoginReply)
}

::google::protobuf::uint8* LoginReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.LoginReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *err_info_, deterministic, target);
  }

  // string session = 2;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea_proto.LoginReply.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session(), target);
  }

  // .user_proto.UserBasicInfo user_info = 9;
  if (this->has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *user_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.LoginReply)
  return target;
}

size_t LoginReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.LoginReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session = 2;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session());
  }

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *err_info_);
  }

  // .user_proto.UserBasicInfo user_info = 9;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.LoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.LoginReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.LoginReply)
    MergeFrom(*source);
  }
}

void LoginReply::MergeFrom(const LoginReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.LoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {

    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.has_err_info()) {
    mutable_err_info()->::sea_proto::ErrorInfo::MergeFrom(from.err_info());
  }
  if (from.has_user_info()) {
    mutable_user_info()->::user_proto::UserBasicInfo::MergeFrom(from.user_info());
  }
}

void LoginReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReply::CopyFrom(const LoginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReply::IsInitialized() const {
  return true;
}

void LoginReply::Swap(LoginReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReply::InternalSwap(LoginReply* other) {
  using std::swap;
  session_.Swap(&other->session_);
  swap(err_info_, other->err_info_);
  swap(user_info_, other->user_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReply::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogoutRequest::InitAsDefaultInstance() {
  ::sea_proto::_LogoutRequest_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::sea_proto::ClientInfo*>(
      ::sea_proto::ClientInfo::internal_default_instance());
}
void LogoutRequest::clear_client_info() {
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRequest::kClientInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsLogoutRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.LogoutRequest)
}
LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_client_info()) {
    client_info_ = new ::sea_proto::ClientInfo(*from.client_info_);
  } else {
    client_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  client_info_ = NULL;
  _cached_size_ = 0;
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:sea_proto.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (this != internal_default_instance()) delete client_info_;
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogoutRequest& LogoutRequest::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsLogoutRequest();
  return *internal_default_instance();
}


void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.LogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
  _internal_metadata_.Clear();
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.LogoutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sea_proto.ClientInfo client_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.LogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.LogoutRequest)
  return false;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.LogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ClientInfo client_info = 1;
  if (this->has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *client_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.LogoutRequest)
}

::google::protobuf::uint8* LogoutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.LogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ClientInfo client_info = 1;
  if (this->has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *client_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.LogoutRequest)
  return target;
}

size_t LogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.LogoutRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sea_proto.ClientInfo client_info = 1;
  if (this->has_client_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.LogoutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.LogoutRequest)
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_info()) {
    mutable_client_info()->::sea_proto::ClientInfo::MergeFrom(from.client_info());
  }
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRequest::InternalSwap(LogoutRequest* other) {
  using std::swap;
  swap(client_info_, other->client_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PingRequest::InitAsDefaultInstance() {
  ::sea_proto::_PingRequest_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::sea_proto::ClientInfo*>(
      ::sea_proto::ClientInfo::internal_default_instance());
}
void PingRequest::clear_client_info() {
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingRequest::kClientInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingRequest::PingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsPingRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_client_info()) {
    client_info_ = new ::sea_proto::ClientInfo(*from.client_info_);
  } else {
    client_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.PingRequest)
}

void PingRequest::SharedCtor() {
  client_info_ = NULL;
  _cached_size_ = 0;
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:sea_proto.PingRequest)
  SharedDtor();
}

void PingRequest::SharedDtor() {
  if (this != internal_default_instance()) delete client_info_;
}

void PingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingRequest& PingRequest::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsPingRequest();
  return *internal_default_instance();
}


void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) {
    delete client_info_;
  }
  client_info_ = NULL;
  _internal_metadata_.Clear();
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.PingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sea_proto.ClientInfo client_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.PingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.PingRequest)
  return false;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ClientInfo client_info = 1;
  if (this->has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *client_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.PingRequest)
}

::google::protobuf::uint8* PingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ClientInfo client_info = 1;
  if (this->has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *client_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.PingRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sea_proto.ClientInfo client_info = 1;
  if (this->has_client_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.PingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.PingRequest)
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_info()) {
    mutable_client_info()->::sea_proto::ClientInfo::MergeFrom(from.client_info());
  }
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingRequest::InternalSwap(PingRequest* other) {
  using std::swap;
  swap(client_info_, other->client_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingRequest::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PingReply::InitAsDefaultInstance() {
  ::sea_proto::_PingReply_default_instance_._instance.get_mutable()->err_info_ = const_cast< ::sea_proto::ErrorInfo*>(
      ::sea_proto::ErrorInfo::internal_default_instance());
}
void PingReply::clear_err_info() {
  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingReply::kErrInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingReply::PingReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sea_2eproto::InitDefaultsPingReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea_proto.PingReply)
}
PingReply::PingReply(const PingReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err_info()) {
    err_info_ = new ::sea_proto::ErrorInfo(*from.err_info_);
  } else {
    err_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sea_proto.PingReply)
}

void PingReply::SharedCtor() {
  err_info_ = NULL;
  _cached_size_ = 0;
}

PingReply::~PingReply() {
  // @@protoc_insertion_point(destructor:sea_proto.PingReply)
  SharedDtor();
}

void PingReply::SharedDtor() {
  if (this != internal_default_instance()) delete err_info_;
}

void PingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingReply::descriptor() {
  ::protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingReply& PingReply::default_instance() {
  ::protobuf_sea_2eproto::InitDefaultsPingReply();
  return *internal_default_instance();
}


void PingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sea_proto.PingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && err_info_ != NULL) {
    delete err_info_;
  }
  err_info_ = NULL;
  _internal_metadata_.Clear();
}

bool PingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea_proto.PingReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sea_proto.ErrorInfo err_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_err_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea_proto.PingReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea_proto.PingReply)
  return false;
#undef DO_
}

void PingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea_proto.PingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *err_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea_proto.PingReply)
}

::google::protobuf::uint8* PingReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea_proto.PingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *err_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea_proto.PingReply)
  return target;
}

size_t PingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea_proto.PingReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sea_proto.ErrorInfo err_info = 1;
  if (this->has_err_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *err_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea_proto.PingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PingReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea_proto.PingReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea_proto.PingReply)
    MergeFrom(*source);
  }
}

void PingReply::MergeFrom(const PingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea_proto.PingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_err_info()) {
    mutable_err_info()->::sea_proto::ErrorInfo::MergeFrom(from.err_info());
  }
}

void PingReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea_proto.PingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingReply::CopyFrom(const PingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea_proto.PingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingReply::IsInitialized() const {
  return true;
}

void PingReply::Swap(PingReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingReply::InternalSwap(PingReply* other) {
  using std::swap;
  swap(err_info_, other->err_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingReply::GetMetadata() const {
  protobuf_sea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sea_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sea_proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::GetPiCodeRequest* Arena::Create< ::sea_proto::GetPiCodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::GetPiCodeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::GetPiCodeReply* Arena::Create< ::sea_proto::GetPiCodeReply >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::GetPiCodeReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::GetSmsVericodeRequest* Arena::Create< ::sea_proto::GetSmsVericodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::GetSmsVericodeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::GetSmsVericodeReply* Arena::Create< ::sea_proto::GetSmsVericodeReply >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::GetSmsVericodeReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::SignupRequest* Arena::Create< ::sea_proto::SignupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::SignupRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::SignupReply* Arena::Create< ::sea_proto::SignupReply >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::SignupReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::SetUserBasicInfoRequest* Arena::Create< ::sea_proto::SetUserBasicInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::SetUserBasicInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::SetUserBasicInfoReply* Arena::Create< ::sea_proto::SetUserBasicInfoReply >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::SetUserBasicInfoReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::LoginRequest* Arena::Create< ::sea_proto::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::LoginRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::LoginReply* Arena::Create< ::sea_proto::LoginReply >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::LoginReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::LogoutRequest* Arena::Create< ::sea_proto::LogoutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::LogoutRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::PingRequest* Arena::Create< ::sea_proto::PingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::PingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea_proto::PingReply* Arena::Create< ::sea_proto::PingReply >(Arena* arena) {
  return Arena::CreateInternal< ::sea_proto::PingReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
