// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto_INCLUDED
#define PROTOBUF_common_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsErrorInfoImpl();
void InitDefaultsErrorInfo();
void InitDefaultsClientInfoImpl();
void InitDefaultsClientInfo();
void InitDefaultsGPSImpl();
void InitDefaultsGPS();
inline void InitDefaults() {
  InitDefaultsErrorInfo();
  InitDefaultsClientInfo();
  InitDefaultsGPS();
}
}  // namespace protobuf_common_2eproto
namespace sea_proto {
class ClientInfo;
class ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
class ErrorInfo;
class ErrorInfoDefaultTypeInternal;
extern ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
class GPS;
class GPSDefaultTypeInternal;
extern GPSDefaultTypeInternal _GPS_default_instance_;
}  // namespace sea_proto
namespace google {
namespace protobuf {
template<> ::sea_proto::ClientInfo* Arena::Create< ::sea_proto::ClientInfo>(Arena*);
template<> ::sea_proto::ErrorInfo* Arena::Create< ::sea_proto::ErrorInfo>(Arena*);
template<> ::sea_proto::GPS* Arena::Create< ::sea_proto::GPS>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sea_proto {

enum ErrorInfo_ErrorCode {
  ErrorInfo_ErrorCode_OK = 0,
  ErrorInfo_ErrorCode_ERROR = 1,
  ErrorInfo_ErrorCode_INVALID = 2,
  ErrorInfo_ErrorCode_NOT_FOUND = 3,
  ErrorInfo_ErrorCode_NO_SERVICE = 4,
  ErrorInfo_ErrorCode_DENIED = 5,
  ErrorInfo_ErrorCode_NETWORK = 6,
  ErrorInfo_ErrorCode_DB_FAIL = 7,
  ErrorInfo_ErrorCode_TIMEOUT = 8,
  ErrorInfo_ErrorCode_VERIFY_FAIL = 1001,
  ErrorInfo_ErrorCode_AUTH_FAIL = 1002,
  ErrorInfo_ErrorCode_PHONE_EXISTED = 1003,
  ErrorInfo_ErrorCode_SESSION_ERROR = 1004,
  ErrorInfo_ErrorCode_TALK_REFUSED = 2001,
  ErrorInfo_ErrorCode_TALK_FAIL = 2002,
  ErrorInfo_ErrorCode_ErrorInfo_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorInfo_ErrorCode_ErrorInfo_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorInfo_ErrorCode_IsValid(int value);
const ErrorInfo_ErrorCode ErrorInfo_ErrorCode_ErrorCode_MIN = ErrorInfo_ErrorCode_OK;
const ErrorInfo_ErrorCode ErrorInfo_ErrorCode_ErrorCode_MAX = ErrorInfo_ErrorCode_TALK_FAIL;
const int ErrorInfo_ErrorCode_ErrorCode_ARRAYSIZE = ErrorInfo_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorInfo_ErrorCode_descriptor();
inline const ::std::string& ErrorInfo_ErrorCode_Name(ErrorInfo_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorInfo_ErrorCode_descriptor(), value);
}
inline bool ErrorInfo_ErrorCode_Parse(
    const ::std::string& name, ErrorInfo_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorInfo_ErrorCode>(
    ErrorInfo_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class ErrorInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sea_proto.ErrorInfo) */ {
 public:
  ErrorInfo();
  virtual ~ErrorInfo();

  ErrorInfo(const ErrorInfo& from);

  inline ErrorInfo& operator=(const ErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorInfo(ErrorInfo&& from) noexcept
    : ErrorInfo() {
    *this = ::std::move(from);
  }

  inline ErrorInfo& operator=(ErrorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorInfo* internal_default_instance() {
    return reinterpret_cast<const ErrorInfo*>(
               &_ErrorInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ErrorInfo* other);
  friend void swap(ErrorInfo& a, ErrorInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ErrorInfo>(NULL);
  }

  ErrorInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ErrorInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ErrorInfo& from);
  void MergeFrom(const ErrorInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ErrorInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ErrorInfo_ErrorCode ErrorCode;
  static const ErrorCode OK =
    ErrorInfo_ErrorCode_OK;
  static const ErrorCode ERROR =
    ErrorInfo_ErrorCode_ERROR;
  static const ErrorCode INVALID =
    ErrorInfo_ErrorCode_INVALID;
  static const ErrorCode NOT_FOUND =
    ErrorInfo_ErrorCode_NOT_FOUND;
  static const ErrorCode NO_SERVICE =
    ErrorInfo_ErrorCode_NO_SERVICE;
  static const ErrorCode DENIED =
    ErrorInfo_ErrorCode_DENIED;
  static const ErrorCode NETWORK =
    ErrorInfo_ErrorCode_NETWORK;
  static const ErrorCode DB_FAIL =
    ErrorInfo_ErrorCode_DB_FAIL;
  static const ErrorCode TIMEOUT =
    ErrorInfo_ErrorCode_TIMEOUT;
  static const ErrorCode VERIFY_FAIL =
    ErrorInfo_ErrorCode_VERIFY_FAIL;
  static const ErrorCode AUTH_FAIL =
    ErrorInfo_ErrorCode_AUTH_FAIL;
  static const ErrorCode PHONE_EXISTED =
    ErrorInfo_ErrorCode_PHONE_EXISTED;
  static const ErrorCode SESSION_ERROR =
    ErrorInfo_ErrorCode_SESSION_ERROR;
  static const ErrorCode TALK_REFUSED =
    ErrorInfo_ErrorCode_TALK_REFUSED;
  static const ErrorCode TALK_FAIL =
    ErrorInfo_ErrorCode_TALK_FAIL;
  static inline bool ErrorCode_IsValid(int value) {
    return ErrorInfo_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    ErrorInfo_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    ErrorInfo_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    ErrorInfo_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return ErrorInfo_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return ErrorInfo_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return ErrorInfo_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .sea_proto.ErrorInfo.ErrorCode err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::sea_proto::ErrorInfo_ErrorCode err() const;
  void set_err(::sea_proto::ErrorInfo_ErrorCode value);

  // @@protoc_insertion_point(class_scope:sea_proto.ErrorInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int err_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
  friend void ::protobuf_common_2eproto::InitDefaultsErrorInfoImpl();
};
// -------------------------------------------------------------------

class ClientInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sea_proto.ClientInfo) */ {
 public:
  ClientInfo();
  virtual ~ClientInfo();

  ClientInfo(const ClientInfo& from);

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientInfo(ClientInfo&& from) noexcept
    : ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
               &_ClientInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ClientInfo* other);
  friend void swap(ClientInfo& a, ClientInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ClientInfo>(NULL);
  }

  ClientInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ClientInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientInfo& from);
  void MergeFrom(const ClientInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dev_key = 2;
  void clear_dev_key();
  static const int kDevKeyFieldNumber = 2;
  const ::std::string& dev_key() const;
  void set_dev_key(const ::std::string& value);
  #if LANG_CXX11
  void set_dev_key(::std::string&& value);
  #endif
  void set_dev_key(const char* value);
  void set_dev_key(const char* value, size_t size);
  ::std::string* mutable_dev_key();
  ::std::string* release_dev_key();
  void set_allocated_dev_key(::std::string* dev_key);

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .sea_proto.GPS gps = 4;
  bool has_gps() const;
  void clear_gps();
  static const int kGpsFieldNumber = 4;
  const ::sea_proto::GPS& gps() const;
  ::sea_proto::GPS* release_gps();
  ::sea_proto::GPS* mutable_gps();
  void set_allocated_gps(::sea_proto::GPS* gps);

  // int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sea_proto.ClientInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dev_key_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::sea_proto::GPS* gps_;
  ::google::protobuf::int64 uid_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
  friend void ::protobuf_common_2eproto::InitDefaultsClientInfoImpl();
};
// -------------------------------------------------------------------

class GPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sea_proto.GPS) */ {
 public:
  GPS();
  virtual ~GPS();

  GPS(const GPS& from);

  inline GPS& operator=(const GPS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GPS(GPS&& from) noexcept
    : GPS() {
    *this = ::std::move(from);
  }

  inline GPS& operator=(GPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPS* internal_default_instance() {
    return reinterpret_cast<const GPS*>(
               &_GPS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GPS* other);
  friend void swap(GPS& a, GPS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPS* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GPS>(NULL);
  }

  GPS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GPS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GPS& from);
  void MergeFrom(const GPS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double longitude = 1;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  double latitude() const;
  void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:sea_proto.GPS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
  friend void ::protobuf_common_2eproto::InitDefaultsGPSImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorInfo

// .sea_proto.ErrorInfo.ErrorCode err = 1;
inline void ErrorInfo::clear_err() {
  err_ = 0;
}
inline ::sea_proto::ErrorInfo_ErrorCode ErrorInfo::err() const {
  // @@protoc_insertion_point(field_get:sea_proto.ErrorInfo.err)
  return static_cast< ::sea_proto::ErrorInfo_ErrorCode >(err_);
}
inline void ErrorInfo::set_err(::sea_proto::ErrorInfo_ErrorCode value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:sea_proto.ErrorInfo.err)
}

// string msg = 2;
inline void ErrorInfo::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorInfo::msg() const {
  // @@protoc_insertion_point(field_get:sea_proto.ErrorInfo.msg)
  return msg_.GetNoArena();
}
inline void ErrorInfo::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sea_proto.ErrorInfo.msg)
}
#if LANG_CXX11
inline void ErrorInfo::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sea_proto.ErrorInfo.msg)
}
#endif
inline void ErrorInfo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sea_proto.ErrorInfo.msg)
}
inline void ErrorInfo::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sea_proto.ErrorInfo.msg)
}
inline ::std::string* ErrorInfo::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:sea_proto.ErrorInfo.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorInfo::release_msg() {
  // @@protoc_insertion_point(field_release:sea_proto.ErrorInfo.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorInfo::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:sea_proto.ErrorInfo.msg)
}

// -------------------------------------------------------------------

// ClientInfo

// int64 uid = 1;
inline void ClientInfo::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ClientInfo::uid() const {
  // @@protoc_insertion_point(field_get:sea_proto.ClientInfo.uid)
  return uid_;
}
inline void ClientInfo::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:sea_proto.ClientInfo.uid)
}

// string dev_key = 2;
inline void ClientInfo::clear_dev_key() {
  dev_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientInfo::dev_key() const {
  // @@protoc_insertion_point(field_get:sea_proto.ClientInfo.dev_key)
  return dev_key_.GetNoArena();
}
inline void ClientInfo::set_dev_key(const ::std::string& value) {
  
  dev_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sea_proto.ClientInfo.dev_key)
}
#if LANG_CXX11
inline void ClientInfo::set_dev_key(::std::string&& value) {
  
  dev_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sea_proto.ClientInfo.dev_key)
}
#endif
inline void ClientInfo::set_dev_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dev_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sea_proto.ClientInfo.dev_key)
}
inline void ClientInfo::set_dev_key(const char* value, size_t size) {
  
  dev_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sea_proto.ClientInfo.dev_key)
}
inline ::std::string* ClientInfo::mutable_dev_key() {
  
  // @@protoc_insertion_point(field_mutable:sea_proto.ClientInfo.dev_key)
  return dev_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_dev_key() {
  // @@protoc_insertion_point(field_release:sea_proto.ClientInfo.dev_key)
  
  return dev_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_dev_key(::std::string* dev_key) {
  if (dev_key != NULL) {
    
  } else {
    
  }
  dev_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_key);
  // @@protoc_insertion_point(field_set_allocated:sea_proto.ClientInfo.dev_key)
}

// string token = 3;
inline void ClientInfo::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientInfo::token() const {
  // @@protoc_insertion_point(field_get:sea_proto.ClientInfo.token)
  return token_.GetNoArena();
}
inline void ClientInfo::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sea_proto.ClientInfo.token)
}
#if LANG_CXX11
inline void ClientInfo::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sea_proto.ClientInfo.token)
}
#endif
inline void ClientInfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sea_proto.ClientInfo.token)
}
inline void ClientInfo::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sea_proto.ClientInfo.token)
}
inline ::std::string* ClientInfo::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:sea_proto.ClientInfo.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_token() {
  // @@protoc_insertion_point(field_release:sea_proto.ClientInfo.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:sea_proto.ClientInfo.token)
}

// .sea_proto.GPS gps = 4;
inline bool ClientInfo::has_gps() const {
  return this != internal_default_instance() && gps_ != NULL;
}
inline void ClientInfo::clear_gps() {
  if (GetArenaNoVirtual() == NULL && gps_ != NULL) {
    delete gps_;
  }
  gps_ = NULL;
}
inline const ::sea_proto::GPS& ClientInfo::gps() const {
  const ::sea_proto::GPS* p = gps_;
  // @@protoc_insertion_point(field_get:sea_proto.ClientInfo.gps)
  return p != NULL ? *p : *reinterpret_cast<const ::sea_proto::GPS*>(
      &::sea_proto::_GPS_default_instance_);
}
inline ::sea_proto::GPS* ClientInfo::release_gps() {
  // @@protoc_insertion_point(field_release:sea_proto.ClientInfo.gps)
  
  ::sea_proto::GPS* temp = gps_;
  gps_ = NULL;
  return temp;
}
inline ::sea_proto::GPS* ClientInfo::mutable_gps() {
  
  if (gps_ == NULL) {
    gps_ = ::google::protobuf::Arena::Create< ::sea_proto::GPS >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sea_proto.ClientInfo.gps)
  return gps_;
}
inline void ClientInfo::set_allocated_gps(::sea_proto::GPS* gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gps_;
  }
  if (gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gps, submessage_arena);
    }
    
  } else {
    
  }
  gps_ = gps;
  // @@protoc_insertion_point(field_set_allocated:sea_proto.ClientInfo.gps)
}

// -------------------------------------------------------------------

// GPS

// double longitude = 1;
inline void GPS::clear_longitude() {
  longitude_ = 0;
}
inline double GPS::longitude() const {
  // @@protoc_insertion_point(field_get:sea_proto.GPS.longitude)
  return longitude_;
}
inline void GPS::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:sea_proto.GPS.longitude)
}

// double latitude = 2;
inline void GPS::clear_latitude() {
  latitude_ = 0;
}
inline double GPS::latitude() const {
  // @@protoc_insertion_point(field_get:sea_proto.GPS.latitude)
  return latitude_;
}
inline void GPS::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:sea_proto.GPS.latitude)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sea_proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sea_proto::ErrorInfo_ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sea_proto::ErrorInfo_ErrorCode>() {
  return ::sea_proto::ErrorInfo_ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto_INCLUDED
